AWSTemplateFormatVersion: 2010-09-09
Description: Elastest Browsers

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: An Amazon EC2 image ID, such as ami-0ff8a91507f77f867.
    Default: ami-03ef731cc103c9f09
  SSHKey:
    Type: String
    Description: SSH key
    Default: kms-aws-share-key

Resources:
  BrowserInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: "Provisioning EC2 instance with Elastest Browser"
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BrowserInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BrowserInstance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/usr/local/bin/installDocker.sh":
              content: |
                #!/bin/bash
                set -eu -o pipefail
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
                apt-get update
                apt-get install -y docker-ce

                # Building custom Elastest Browser with iptables
                TMPDIR=$(mktemp -d)
                pushd $TMPDIR
                docker pull elastestbrowsers/chrome:latest-2.0.0
                wget -O Dockerfile https://raw.githubusercontent.com/OpenVidu/openvidu-loadtest/recording_loadtest/aws/browser-docker-image/chrome/Dockerfile
                docker build -t elastestbrowsers/chrome:iptables .
                popd
                rm -rf $TMPDIR

                # Provisioning media files
                mkdir /opt/openvidu
                chmod -R 777 /opt/openvidu
                pushd /opt/openvidu
                cat >url.txt<<EOF
                http://public.openvidu.io/fakeaudio.wav
                http://public.openvidu.io/fakevideo.y4m
                http://public.openvidu.io/fakevideo_with_padding.y4m
                EOF
                cat url.txt | xargs -n 1 -P 10 wget --tries=0 --read-timeout=10
                rm url.txt

                # Adding regular user to Docker group
                usermod -aG docker ubuntu
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/launchBrowser":
              content: |
                #!/bin/bash
                # Wait for Docker to start
                until pids=$(pidof dockerd)
                do
                  sleep 1
                done
                sleep 1
                # Creating folder for recordings
                mkdir -p /home/ubuntu/recordings
                chmod 777 /home/ubuntu/recordings

                docker run --detach --name chrome --network=host --cap-add=SYS_ADMIN --cap-add=NET_ADMIN -v /home/ubuntu/recordings:/home/ubuntu/recordings -v /opt/openvidu:/opt/openvidu elastestbrowsers/chrome:iptables
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/setHosts.sh":
              content: |
                #!/bin/bash
                # Config hostname in hosts
                echo $(hostname -I | cut -d\  -f1) $(hostname) >> /etc/hosts
              mode: "000755"
              owner: "root"
              group: "root"
            "/etc/rc.local":
              content: |
                #!/bin/sh -e
                /usr/local/bin/setHosts.sh
                /usr/local/bin/launchBrowser
                exit 0
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: "t3.medium"
      KeyName: !Ref SSHKey
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          set -eu -o pipefail
          apt-get update
          apt-get install -y python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource BrowserInstance

          /usr/local/bin/installDocker.sh || { echo "Fail deploying docker"; exit 1; }

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT25M
        Count: 1
